
#pragma once

/*** The following block of code is to define:
 ***
 ***    UInt32  : 32 bits unsigned integer.
 ***    Int32   : 32 bits signed integer.
 ***    UInt64  : 64 bits unsigned integer.
 ***    Int64   : 64 bits signed integer.
 ***
 ***    INT_MIN : The minimal value for Int32
 ***    INT_MAX : The maximal value for Int32
 ***/
#ifndef FD_DEFS_H
    #include <limits.h>

    /* Identify if 64 bits platform with __64BIT__.
     * Can also be done from compiler command line. 
     */
    #if defined(_WIN64)
       #define __64BIT__ 1
    #endif

    #if defined( __LP64__ ) || defined( _LP64 )
       #define __64BIT__ 1
    #endif

    /* Check also for some known GCC def for 64 bits platform. */
    #if defined(__alpha__)\
        ||defined(__ia64__)\
        ||defined(__ppc64__)\
        ||defined(__s390x__)\
        ||defined(__x86_64__)
       #define __64BIT__ 1
    #endif		  
		   
    #if !defined(__MACTYPES__)
        typedef signed int   Int32;
        typedef unsigned int UInt32;

        #if defined(_WIN32) || defined(_WIN64)
           /* See "Windows Data Types". Platform SDK. MSDN documentation. */
           typedef signed __int64   Int64;
           typedef unsigned __int64 UInt64;
        #else
           #if defined(__64BIT__)
              /* Standard LP64 model for 64 bits Unix platform. */
              typedef signed long   Int64;
              typedef unsigned long UInt64;
           #else
              /* Standard ILP32 model for 32 bits Unix platform. */
              typedef signed long long   Int64;
              typedef unsigned long long UInt64;
           #endif
         #endif
    #endif
#endif

/* min/max value for a int */
#define TA_INTEGER_MIN (INT_MIN+1)
#define TA_INTEGER_MAX (INT_MAX)

/* min/max value for a double 
 *
 * Use fix value making sense in the
 * context of TA-Lib (avoid to use DBL_MIN
 * and DBL_MAX standard macro because they
 * are troublesome with some compiler).
 */
#define TA_REAL_MIN (-3e+37)
#define TA_REAL_MAX (3e+37)

/* A value outside of the min/max range 
 * indicates an undefined or default value.
 */
#define TA_INTEGER_DEFAULT (INT_MIN)
#define TA_REAL_DEFAULT    (-4e+37)

/* Part of this file is generated by gen_code */

typedef enum {
    /*      0 */  TA_SUCCESS,            /* No error */
    /*      1 */  TA_LIB_NOT_INITIALIZE, /* TA_Initialize was not sucessfully called */
    /*      2 */  TA_BAD_PARAM, /* A parameter is out of range */
    /*      3 */  TA_ALLOC_ERR, /* Possibly out-of-memory */
    /*      4 */  TA_GROUP_NOT_FOUND,
    /*      5 */  TA_FUNC_NOT_FOUND,
    /*      6 */  TA_INVALID_HANDLE,
    /*      7 */  TA_INVALID_PARAM_HOLDER,
    /*      8 */  TA_INVALID_PARAM_HOLDER_TYPE,
    /*      9 */  TA_INVALID_PARAM_FUNCTION,
    /*     10 */  TA_INPUT_NOT_ALL_INITIALIZE,
    /*     11 */  TA_OUTPUT_NOT_ALL_INITIALIZE,
    /*     12 */  TA_OUT_OF_RANGE_START_INDEX,
    /*     13 */  TA_OUT_OF_RANGE_END_INDEX,
    /*     14 */  TA_INVALID_LIST_TYPE,
    /*     15 */  TA_BAD_OBJECT,
    /*     16 */  TA_NOT_SUPPORTED,
    /*   5000 */  TA_INTERNAL_ERROR = 5000,
    /* 0xFFFF */  TA_UNKNOWN_ERR = 0xFFFF
} TA_RetCode;

typedef enum {   
    TA_COMPATIBILITY_DEFAULT,
    TA_COMPATIBILITY_METASTOCK
} TA_Compatibility;

typedef enum {
   TA_MAType_SMA =0,
   TA_MAType_EMA =1,
   TA_MAType_WMA =2,
   TA_MAType_DEMA =3,
   TA_MAType_TEMA =4,
   TA_MAType_TRIMA =5,
   TA_MAType_KAMA =6,
   TA_MAType_MAMA =7,
   TA_MAType_T3 =8
} TA_MAType;

typedef enum {
     /* 000 */  TA_FUNC_UNST_ADX,
     /* 001 */  TA_FUNC_UNST_ADXR,
     /* 002 */  TA_FUNC_UNST_ATR,
     /* 003 */  TA_FUNC_UNST_CMO,
     /* 004 */  TA_FUNC_UNST_DX,
     /* 005 */  TA_FUNC_UNST_EMA,
     /* 006 */  TA_FUNC_UNST_HT_DCPERIOD,
     /* 007 */  TA_FUNC_UNST_HT_DCPHASE,
     /* 008 */  TA_FUNC_UNST_HT_PHASOR,
     /* 009 */  TA_FUNC_UNST_HT_SINE,
     /* 010 */  TA_FUNC_UNST_HT_TRENDLINE,
     /* 011 */  TA_FUNC_UNST_HT_TRENDMODE,
     /* 012 */  TA_FUNC_UNST_KAMA,
     /* 013 */  TA_FUNC_UNST_MAMA,
     /* 014 */  TA_FUNC_UNST_MFI,
     /* 015 */  TA_FUNC_UNST_MINUS_DI,
     /* 016 */  TA_FUNC_UNST_MINUS_DM,
     /* 017 */  TA_FUNC_UNST_NATR,
     /* 018 */  TA_FUNC_UNST_PLUS_DI,
     /* 019 */  TA_FUNC_UNST_PLUS_DM,
     /* 020 */  TA_FUNC_UNST_RSI,
     /* 021 */  TA_FUNC_UNST_STOCHRSI,
     /* 022 */  TA_FUNC_UNST_T3,
                TA_FUNC_UNST_ALL,
                TA_FUNC_UNST_NONE = -1
} TA_FuncUnstId;

/* The TA_RangeType enum specifies the types of range that can be considered 
 * when to compare a part of a candle to other candles
 */

typedef enum {
   TA_RangeType_RealBody,
   TA_RangeType_HighLow,
   TA_RangeType_Shadows
} TA_RangeType;

/* The TA_CandleSettingType enum specifies which kind of setting to consider;
 * the settings are based on the parts of the candle and the common words
 * indicating the length (short, long, very long)
 */
typedef enum {
    TA_BodyLong,
    TA_BodyVeryLong,
    TA_BodyShort,
    TA_BodyDoji,
    TA_ShadowLong,
    TA_ShadowVeryLong,
    TA_ShadowShort,
    TA_ShadowVeryShort,
    TA_Near,
    TA_Far,
    TA_Equal,
    TA_AllCandleSettings
} TA_CandleSettingType;
